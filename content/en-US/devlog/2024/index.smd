---
.title = "Devlog",
.author = "",
.date = @date("2024-08-07T00:00:00"),
.layout = "devlog.shtml",
// When archiving this devlog, remember to disable
// RSS feed generation, as only the current year page
// should be generating a feed.
.alternatives = [{
	.layout = "devlog.xml",
	.output = "devlog/index.xml",
}],
.custom = {
	"mobile_menu_title": "Devlog",
},
// Every entry is a block of markdown content that 
// starts with a $section heading.
// The $section.id is the date of the new micro-post.
// It will also be used as the unique identifier for your
// new entry both in HTML (as the fragment value) and in
// the RSS feed.
// If you want to publish more than one entry in the same
// day, add hours, minutes and seconds to the id value.
// If you get a date parsing error on build, you messed up
// the date syntax.
// You can look at this page's '.date' frontmatter field for
// an example of a correct date string.
---

# [File Watching Implemented for kqueue]($section.id('2024-10-29'))

Author: Andrew Kelley

I knocked out [#20599](https://github.com/ziglang/zig/issues/20599) on a plane
ride last week (coincidentally on the way to a [KQ
tournament](https://bumblebeargames.com/pages/bumblebash-5)), so if you're
tracking master branch, you can now use the `zig build --watch` feature on
macOS, FreeBSD, OpenBSD, NetBSD, DragonFlyBSD, and Haiku.

This feature tracks all file system inputs, automatically repeating invalidated
build steps. It can be quite handy when refactoring a codebase using a
terminal-based workflow since it means seeing instant feedback when any build
inputs - source code or otherwise - are updated.

KQueue allows placing a watch on an open directory handle, but the event does
not indicate the name of the changed file within any given directory. This is
no problem for the Zig Build System. If any directory that contains watched
files are triggered, the respective steps are invalidated, and then those steps
use fstat to determine if the cached artifacts are still valid.

# [CI Coverage Added for Incremental Compilation]($section.id('2024-10-06'))

Author: Matthew Lugg

Over the last few months, myself and Jakub have been working hard on incremental
compilation, where the compiler can "remember" parts of a previous build and only
re-compile the code that changed. We just hit an important milestone here: **our CI
test suite [now includes][incr-ci-pr] our "incremental compilation" tests!** This set
of tests is small right now, but will grow rapidly as we fix bugs and, eventually,
fuzz test the implementation.

You can find all our incremental compilation test cases [here][incr-cases]. The CI runs
all of them on `x86_64-linux` with the self-hosted x86_64 backend, as well as on a few
targets with the C backend (`-ofmt=c`). It's approaching the point where you *can*
start to use incremental compilation in some very basic cases; for instance, I've
recently managed to perform an incremental update on [Andrew's Tetris clone][tetris].

If you're using a `master` build of Zig on Linux on x86_64, you can try playing
with incremental compilation **right now** with this command:

```
zig build -fincremental --watch
```

(Make sure your `Step.Compile` has `.use_llvm = false, .use_lld = false`, so Zig
doesn't try to use LLVM!)

Beware, though, that you'll run into bugs pretty quickly, including false
positive compile errors and even miscompilations; use at your own risk.

[incr-ci-pr]: https://github.com/ziglang/zig/pull/21518
[incr-cases]: https://github.com/ziglang/zig/tree/148b5b4c7806a694084f1e6f9514b0333cb75c6a/test/incremental
[tetris]: https://github.com/andrewrk/tetris

# [New Devlog Structure]($section.id('2024-09-30'))
Author: Loris Cro

The devlog has switched to a per-year pre-sharded structure to avoid the issue of 
having a page that grows indefinitely.

**NOTE:** the RSS feed link has not changed. No action needed from RSS feed
consumers. Cached links to older entries might become stale, but new entries from
now on will have the correct link.  


If you want to get a similar setup going for your personal blog, check out 
[https://github.com/kristoff-it/zine-devlog-examples](https://github.com/kristoff-it/zine-devlog-examples)

# [loongarch64 added to the download page]($section.id('2024-09-24'))

Author: Andrew Kelley

Thanks to contributions from [YANG Xudong](https://github.com/yxd-ym) and
[Alex Rønne Petersen](https://www.alexrp.com/), along with
[upgrading to LLVM 19](https://github.com/ziglang/zig/commit/c6ad4521c77372cb52adfb9a52b0854d830fed9c),
loongarch64 support in Zig is progressed enough that
[zig-bootstrap](https://github.com/ziglang/zig-bootstrap) works for this
target. In celebration, I have added loongarch64-linux to [the download
page](/download/).

# [2024-09-16]($section.id('2024-09-16'))

Author: Andrew Kelley

I've been porting stb_truetype.h to Zig on the side. Check out this snippet:

```c
{
    float sum = 0;
    for (i=0; i < result->w; ++i) {
      float k;
      int m;
      sum += scanline2[i];
      k = scanline[i] + sum;
      k = (float) STBTT_fabs(k)*255 + 0.5f;
      m = (int) k;
      if (m > 255) m = 255;
      result->pixels[j*result->stride + i] = (unsigned char) m;
    }
}
```
⬇️
```zig
{
    var sum: f32 = 0;
    for (scanline, scanline2, result.pixels[j*result.stride..][0..result.w]) |s, s2, *p| {
        sum += s2;
        p.* = @min(@abs(s + sum)*255 + 0.5, 255);
    }
}
```

Ahh, much better.

# [Zig tokenizer updated to use labeled switch statements]($section.id('2024-09-11'))

Author: Andrew Kelley

Now that Matthew landed [labeled switch continue syntax](https://github.com/ziglang/zig/pull/21257), it's time
to start using it.

[Eric Petersen swooped in for a first-time contribution](https://github.com/ziglang/zig/pull/21367),
updating Zig's tokenizer to use the new syntax, measuring a 13% wall time
performance increase for the `zig ast-check` command:

![](perf.png "perf benchmark screenshot")

This line of code tickles me:

```zig
state: switch (State.start) {
```
